<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="kr.hhplus.be.server.domain.order.OrderServiceTest" tests="5" skipped="0" failures="1" errors="0" timestamp="2025-04-12T07:29:34" hostname="yeomseogcheon-ui-MacBookPro.local" time="0.203">
  <properties/>
  <testcase name="주문 생성 시 유효한 CreateOrderCommand를 전달하면 주문과 주문 아이템을 생성하고 저장, 미결제시 주문 취소를 하는 handler에 등록한다." classname="kr.hhplus.be.server.domain.order.OrderServiceTest" time="0.063">
    <failure message="org.mockito.exceptions.misusing.InvalidUseOfMatchersException: &#10;Misplaced or misused argument matcher detected here:&#10;&#10;-&gt; at kr.hhplus.be.server.domain.coupon.UserCouponTest.lambda$useExpiredCoupon$1(UserCouponTest.java:67)&#10;-&gt; at kr.hhplus.be.server.domain.coupon.UserCouponTest.lambda$useAlreadyUsedCoupon$0(UserCouponTest.java:51)&#10;&#10;You cannot use argument matchers outside of verification or stubbing.&#10;Examples of correct usage of argument matchers:&#10;    when(mock.get(anyInt())).thenReturn(null);&#10;    doThrow(new RuntimeException()).when(mock).someVoidMethod(any());&#10;    verify(mock).someMethod(contains(&quot;foo&quot;))&#10;&#10;This message may appear after an NullPointerException if the last matcher is returning an object &#10;like any() but the stubbed method signature expect a primitive argument, in this case,&#10;use primitive alternatives.&#10;    when(mock.get(any())); // bad use, will raise NPE&#10;    when(mock.get(anyInt())); // correct usage use&#10;&#10;Also, this error might show up because you use argument matchers with methods that cannot be mocked.&#10;Following methods *cannot* be stubbed/verified: final/private/equals()/hashCode().&#10;Mocking methods declared on non-public parent classes is not supported.&#10;" type="org.mockito.exceptions.misusing.InvalidUseOfMatchersException">org.mockito.exceptions.misusing.InvalidUseOfMatchersException: 
Misplaced or misused argument matcher detected here:

-&gt; at kr.hhplus.be.server.domain.coupon.UserCouponTest.lambda$useExpiredCoupon$1(UserCouponTest.java:67)
-&gt; at kr.hhplus.be.server.domain.coupon.UserCouponTest.lambda$useAlreadyUsedCoupon$0(UserCouponTest.java:51)

You cannot use argument matchers outside of verification or stubbing.
Examples of correct usage of argument matchers:
    when(mock.get(anyInt())).thenReturn(null);
    doThrow(new RuntimeException()).when(mock).someVoidMethod(any());
    verify(mock).someMethod(contains(&quot;foo&quot;))

This message may appear after an NullPointerException if the last matcher is returning an object 
like any() but the stubbed method signature expect a primitive argument, in this case,
use primitive alternatives.
    when(mock.get(any())); // bad use, will raise NPE
    when(mock.get(anyInt())); // correct usage use

Also, this error might show up because you use argument matchers with methods that cannot be mocked.
Following methods *cannot* be stubbed/verified: final/private/equals()/hashCode().
Mocking methods declared on non-public parent classes is not supported.

	at app//org.mockito.junit.jupiter.MockitoExtension.beforeEach(MockitoExtension.java:160)
	at java.base@17.0.11/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base@17.0.11/java.util.ArrayList.forEach(ArrayList.java:1511)
	Suppressed: java.lang.NullPointerException: Cannot invoke &quot;java.util.Set.forEach(java.util.function.Consumer)&quot; because the return value of &quot;org.junit.jupiter.api.extension.ExtensionContext$Store.remove(Object, java.lang.Class)&quot; is null
		at org.mockito.junit.jupiter.MockitoExtension.afterEach(MockitoExtension.java:194)
		... 2 more
</failure>
  </testcase>
  <testcase name="주문 취소 시 유효한 CancelOrderCommand를 전달하면 주문을 취소하고 저장한다." classname="kr.hhplus.be.server.domain.order.OrderServiceTest" time="0.121"/>
  <testcase name="주문 확정 시 유효한 주문 ID를 전달하면 주문을 확정하고 저장한다." classname="kr.hhplus.be.server.domain.order.OrderServiceTest" time="0.005"/>
  <testcase name="주문 취소 시 주문이 존재하지 않으면 OrderNotExistError 예외를 발생시킨다." classname="kr.hhplus.be.server.domain.order.OrderServiceTest" time="0.006"/>
  <testcase name="주문 확정 시 주문이 존재하지 않으면 OrderNotExistError 예외를 발생시킨다." classname="kr.hhplus.be.server.domain.order.OrderServiceTest" time="0.004"/>
  <system-out><![CDATA[]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
